package com.sssppp.Lucene.TextProcess.QueryAndFilterData.Queries;

import java.io.IOException;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.IntField;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.queryparser.classic.ParseException;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.RAMDirectory;
import org.apache.lucene.util.Version;

public class UseQueryParser {

	static Version version = Version.LUCENE_47;
	
	public static void main(String arg[]) throws IOException, ParseException {
//		String queryString = "humpty";
		
		/**
		 * ==================================================
		 * 通配符查询--Wildcard，默认是不允许通配符出现在首位
		 * queryString = "humpty*";
		 * queryString = "*";
		 * queryParser.setAllowLeadingWildcard(true);
		 * ===================================================
		 */
//		String queryString = "humpty*";  
//		String queryString = "*";         
		
		/**
		 * ===================================================
		 * TermRangeSearch
		 * queryString = "[aa TO c]";
		 * [start TO end] – inclusive
		 * {start TO end} – exclusive
		 * 需要设置：queryParser.setAnalyzeRangeTerms(true);
		 * ================================================
		 */
//		String queryString = "[aa TO c]"; 

		/**
		 * ==============================================
		 * Autogeneratedp hrase query
		 * queryString = "humpty+dumpty+sat";
		 * queryParser.setAutoGeneratePhraseQueries(true);
		 * 1. setAutoGeneratePhraseQueries(false)：
		 *    则会将String作为一个整体去匹配
		 * 2. setAutoGeneratePhraseQueries(true)：
		 *    则会将String中的“+”解析成“or（或）”
		 * =====================================================
		 * 
		 * =================================================
		 * Date resolution
		 * queryParser.setDateResolution("date", DateTools.Resolution.DAY);
		 * queryParser.setLocale(Locale.US);
		 * queryParser.setTimeZone(TimeZone.getTimeZone("Am erica/New_York"));
		 * ===================================================
		 * 
		 * 
		 */
		String queryString = "humpty+dumpty+sat";

		Analyzer analyzer = new StandardAnalyzer(version);
		QueryParser queryParser = new QueryParser(version, "content", analyzer);
		queryParser.setAllowLeadingWildcard(true); // 允许通配符出现在首位
		queryParser.setAnalyzeRangeTerms(true);
		queryParser.setAutoGeneratePhraseQueries(true);
		Query query = queryParser.parse(queryString);
		System.out.println("===>DefaultOperator:【"
				+ queryParser.getDefaultOperator() + "】 , query :"
				+ query.toString() + "\n");
		testQuery(query, analyzer);
	}

	public static void testQuery(Query query,Analyzer analyzer) throws IOException, ParseException {
		Directory directory = new RAMDirectory();
		IndexWriterConfig config = new IndexWriterConfig(version, analyzer);
		IndexWriter indexWriter = new IndexWriter(directory, config);

		Document doc = new Document();
		StringField stringField = new StringField("name", "", Field.Store.YES);
		TextField textField = new TextField("content", "", Field.Store.YES);
		IntField intField = new IntField("num", 0, Field.Store.YES);

		// Document-1
		doc.removeField("name");
		doc.removeField("content");
		doc.removeField("num");
		stringField.setStringValue("First");
		textField.setStringValue("Humpty Dumpty sat on a wall,");
		intField.setIntValue(100);
		doc.add(stringField);
		doc.add(textField);
		doc.add(intField);
		indexWriter.addDocument(doc);

		// Document-2
		doc.removeField("name");
		doc.removeField("content");
		doc.removeField("num");
		stringField.setStringValue("Second");
		textField.setStringValue("Humpty Dumpty had a great fall.");
		intField.setIntValue(200);
		doc.add(stringField);
		doc.add(textField);
		doc.add(intField);
		indexWriter.addDocument(doc);

		// Document-3
		doc.removeField("name");
		doc.removeField("content");
		doc.removeField("num");
		stringField.setStringValue("Third");
		textField
				.setStringValue("All the king's horses and all the king's men");
		intField.setIntValue(300);
		doc.add(stringField);
		doc.add(textField);
		doc.add(intField);
		indexWriter.addDocument(doc);

		// Document-4
		doc.removeField("name");
		doc.removeField("content");
		doc.removeField("num");
		stringField.setStringValue("Fourth");
		textField.setStringValue("Couldn't put Humpty together again.");
		intField.setIntValue(400);
		doc.add(stringField);
		doc.add(textField);
		doc.add(intField);
		indexWriter.addDocument(doc);
		indexWriter.commit();
		indexWriter.close();

		IndexReader indexReader = DirectoryReader.open(directory);
		IndexSearcher indexSearcher = new IndexSearcher(indexReader);
		TopDocs topDocs = indexSearcher.search(query, 100);
		for (ScoreDoc scoreDoc : topDocs.scoreDocs) {
			Document document = indexReader.document(scoreDoc.doc);
			System.out.printf("【name】:%-6s 【content】:%-35s 【num】:%f \n",
					document.getField("name").stringValue(),
					document.getField("content").stringValue(),
					document.getField("num").numericValue().doubleValue());
		}
	}
}












